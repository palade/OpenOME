/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.serviceorch.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskServiceInfo implements org.apache.thrift.TBase<TaskServiceInfo, TaskServiceInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskServiceInfo");

  private static final org.apache.thrift.protocol.TField TASK_IOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIOPE", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CANDIDATE_SERVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateServices", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskServiceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskServiceInfoTupleSchemeFactory());
  }

  public String taskIOPE; // optional
  public List<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo> candidateServices; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_IOPE((short)1, "taskIOPE"),
    CANDIDATE_SERVICES((short)2, "candidateServices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_IOPE
          return TASK_IOPE;
        case 2: // CANDIDATE_SERVICES
          return CANDIDATE_SERVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TASK_IOPE,_Fields.CANDIDATE_SERVICES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_IOPE, new org.apache.thrift.meta_data.FieldMetaData("taskIOPE", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANDIDATE_SERVICES, new org.apache.thrift.meta_data.FieldMetaData("candidateServices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cn.edu.pku.ss.matchmaker.thrift.ProfileInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskServiceInfo.class, metaDataMap);
  }

  public TaskServiceInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskServiceInfo(TaskServiceInfo other) {
    if (other.isSetTaskIOPE()) {
      this.taskIOPE = other.taskIOPE;
    }
    if (other.isSetCandidateServices()) {
      List<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo> __this__candidateServices = new ArrayList<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo>();
      for (cn.edu.pku.ss.matchmaker.thrift.ProfileInfo other_element : other.candidateServices) {
        __this__candidateServices.add(new cn.edu.pku.ss.matchmaker.thrift.ProfileInfo(other_element));
      }
      this.candidateServices = __this__candidateServices;
    }
  }

  public TaskServiceInfo deepCopy() {
    return new TaskServiceInfo(this);
  }

  @Override
  public void clear() {
    this.taskIOPE = null;
    this.candidateServices = null;
  }

  public String getTaskIOPE() {
    return this.taskIOPE;
  }

  public TaskServiceInfo setTaskIOPE(String taskIOPE) {
    this.taskIOPE = taskIOPE;
    return this;
  }

  public void unsetTaskIOPE() {
    this.taskIOPE = null;
  }

  /** Returns true if field taskIOPE is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIOPE() {
    return this.taskIOPE != null;
  }

  public void setTaskIOPEIsSet(boolean value) {
    if (!value) {
      this.taskIOPE = null;
    }
  }

  public int getCandidateServicesSize() {
    return (this.candidateServices == null) ? 0 : this.candidateServices.size();
  }

  public java.util.Iterator<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo> getCandidateServicesIterator() {
    return (this.candidateServices == null) ? null : this.candidateServices.iterator();
  }

  public void addToCandidateServices(cn.edu.pku.ss.matchmaker.thrift.ProfileInfo elem) {
    if (this.candidateServices == null) {
      this.candidateServices = new ArrayList<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo>();
    }
    this.candidateServices.add(elem);
  }

  public List<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo> getCandidateServices() {
    return this.candidateServices;
  }

  public TaskServiceInfo setCandidateServices(List<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo> candidateServices) {
    this.candidateServices = candidateServices;
    return this;
  }

  public void unsetCandidateServices() {
    this.candidateServices = null;
  }

  /** Returns true if field candidateServices is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidateServices() {
    return this.candidateServices != null;
  }

  public void setCandidateServicesIsSet(boolean value) {
    if (!value) {
      this.candidateServices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_IOPE:
      if (value == null) {
        unsetTaskIOPE();
      } else {
        setTaskIOPE((String)value);
      }
      break;

    case CANDIDATE_SERVICES:
      if (value == null) {
        unsetCandidateServices();
      } else {
        setCandidateServices((List<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_IOPE:
      return getTaskIOPE();

    case CANDIDATE_SERVICES:
      return getCandidateServices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_IOPE:
      return isSetTaskIOPE();
    case CANDIDATE_SERVICES:
      return isSetCandidateServices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskServiceInfo)
      return this.equals((TaskServiceInfo)that);
    return false;
  }

  public boolean equals(TaskServiceInfo that) {
    if (that == null)
      return false;

    boolean this_present_taskIOPE = true && this.isSetTaskIOPE();
    boolean that_present_taskIOPE = true && that.isSetTaskIOPE();
    if (this_present_taskIOPE || that_present_taskIOPE) {
      if (!(this_present_taskIOPE && that_present_taskIOPE))
        return false;
      if (!this.taskIOPE.equals(that.taskIOPE))
        return false;
    }

    boolean this_present_candidateServices = true && this.isSetCandidateServices();
    boolean that_present_candidateServices = true && that.isSetCandidateServices();
    if (this_present_candidateServices || that_present_candidateServices) {
      if (!(this_present_candidateServices && that_present_candidateServices))
        return false;
      if (!this.candidateServices.equals(that.candidateServices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TaskServiceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TaskServiceInfo typedOther = (TaskServiceInfo)other;

    lastComparison = Boolean.valueOf(isSetTaskIOPE()).compareTo(typedOther.isSetTaskIOPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIOPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIOPE, typedOther.taskIOPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCandidateServices()).compareTo(typedOther.isSetCandidateServices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidateServices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateServices, typedOther.candidateServices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskServiceInfo(");
    boolean first = true;

    if (isSetTaskIOPE()) {
      sb.append("taskIOPE:");
      if (this.taskIOPE == null) {
        sb.append("null");
      } else {
        sb.append(this.taskIOPE);
      }
      first = false;
    }
    if (isSetCandidateServices()) {
      if (!first) sb.append(", ");
      sb.append("candidateServices:");
      if (this.candidateServices == null) {
        sb.append("null");
      } else {
        sb.append(this.candidateServices);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskServiceInfoStandardSchemeFactory implements SchemeFactory {
    public TaskServiceInfoStandardScheme getScheme() {
      return new TaskServiceInfoStandardScheme();
    }
  }

  private static class TaskServiceInfoStandardScheme extends StandardScheme<TaskServiceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskServiceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_IOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskIOPE = iprot.readString();
              struct.setTaskIOPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CANDIDATE_SERVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.candidateServices = new ArrayList<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  cn.edu.pku.ss.matchmaker.thrift.ProfileInfo _elem2; // required
                  _elem2 = new cn.edu.pku.ss.matchmaker.thrift.ProfileInfo();
                  _elem2.read(iprot);
                  struct.candidateServices.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCandidateServicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskServiceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskIOPE != null) {
        if (struct.isSetTaskIOPE()) {
          oprot.writeFieldBegin(TASK_IOPE_FIELD_DESC);
          oprot.writeString(struct.taskIOPE);
          oprot.writeFieldEnd();
        }
      }
      if (struct.candidateServices != null) {
        if (struct.isSetCandidateServices()) {
          oprot.writeFieldBegin(CANDIDATE_SERVICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.candidateServices.size()));
            for (cn.edu.pku.ss.matchmaker.thrift.ProfileInfo _iter3 : struct.candidateServices)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskServiceInfoTupleSchemeFactory implements SchemeFactory {
    public TaskServiceInfoTupleScheme getScheme() {
      return new TaskServiceInfoTupleScheme();
    }
  }

  private static class TaskServiceInfoTupleScheme extends TupleScheme<TaskServiceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskServiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskIOPE()) {
        optionals.set(0);
      }
      if (struct.isSetCandidateServices()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTaskIOPE()) {
        oprot.writeString(struct.taskIOPE);
      }
      if (struct.isSetCandidateServices()) {
        {
          oprot.writeI32(struct.candidateServices.size());
          for (cn.edu.pku.ss.matchmaker.thrift.ProfileInfo _iter4 : struct.candidateServices)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskServiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.taskIOPE = iprot.readString();
        struct.setTaskIOPEIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.candidateServices = new ArrayList<cn.edu.pku.ss.matchmaker.thrift.ProfileInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            cn.edu.pku.ss.matchmaker.thrift.ProfileInfo _elem7; // required
            _elem7 = new cn.edu.pku.ss.matchmaker.thrift.ProfileInfo();
            _elem7.read(iprot);
            struct.candidateServices.add(_elem7);
          }
        }
        struct.setCandidateServicesIsSet(true);
      }
    }
  }

}

