/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.pku.ss.serviceorch.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceOrchRequest implements org.apache.thrift.TBase<ServiceOrchRequest, ServiceOrchRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceOrchRequest");

  private static final org.apache.thrift.protocol.TField BPEL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("bpelContent", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASKS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tasksInfo", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceOrchRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceOrchRequestTupleSchemeFactory());
  }

  public String bpelContent; // optional
  public Map<String,TaskServiceInfo> tasksInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BPEL_CONTENT((short)1, "bpelContent"),
    TASKS_INFO((short)2, "tasksInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BPEL_CONTENT
          return BPEL_CONTENT;
        case 2: // TASKS_INFO
          return TASKS_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BPEL_CONTENT,_Fields.TASKS_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BPEL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("bpelContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASKS_INFO, new org.apache.thrift.meta_data.FieldMetaData("tasksInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskServiceInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceOrchRequest.class, metaDataMap);
  }

  public ServiceOrchRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceOrchRequest(ServiceOrchRequest other) {
    if (other.isSetBpelContent()) {
      this.bpelContent = other.bpelContent;
    }
    if (other.isSetTasksInfo()) {
      Map<String,TaskServiceInfo> __this__tasksInfo = new HashMap<String,TaskServiceInfo>();
      for (Map.Entry<String, TaskServiceInfo> other_element : other.tasksInfo.entrySet()) {

        String other_element_key = other_element.getKey();
        TaskServiceInfo other_element_value = other_element.getValue();

        String __this__tasksInfo_copy_key = other_element_key;

        TaskServiceInfo __this__tasksInfo_copy_value = new TaskServiceInfo(other_element_value);

        __this__tasksInfo.put(__this__tasksInfo_copy_key, __this__tasksInfo_copy_value);
      }
      this.tasksInfo = __this__tasksInfo;
    }
  }

  public ServiceOrchRequest deepCopy() {
    return new ServiceOrchRequest(this);
  }

  @Override
  public void clear() {
    this.bpelContent = null;
    this.tasksInfo = null;
  }

  public String getBpelContent() {
    return this.bpelContent;
  }

  public ServiceOrchRequest setBpelContent(String bpelContent) {
    this.bpelContent = bpelContent;
    return this;
  }

  public void unsetBpelContent() {
    this.bpelContent = null;
  }

  /** Returns true if field bpelContent is set (has been assigned a value) and false otherwise */
  public boolean isSetBpelContent() {
    return this.bpelContent != null;
  }

  public void setBpelContentIsSet(boolean value) {
    if (!value) {
      this.bpelContent = null;
    }
  }

  public int getTasksInfoSize() {
    return (this.tasksInfo == null) ? 0 : this.tasksInfo.size();
  }

  public void putToTasksInfo(String key, TaskServiceInfo val) {
    if (this.tasksInfo == null) {
      this.tasksInfo = new HashMap<String,TaskServiceInfo>();
    }
    this.tasksInfo.put(key, val);
  }

  public Map<String,TaskServiceInfo> getTasksInfo() {
    return this.tasksInfo;
  }

  public ServiceOrchRequest setTasksInfo(Map<String,TaskServiceInfo> tasksInfo) {
    this.tasksInfo = tasksInfo;
    return this;
  }

  public void unsetTasksInfo() {
    this.tasksInfo = null;
  }

  /** Returns true if field tasksInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTasksInfo() {
    return this.tasksInfo != null;
  }

  public void setTasksInfoIsSet(boolean value) {
    if (!value) {
      this.tasksInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BPEL_CONTENT:
      if (value == null) {
        unsetBpelContent();
      } else {
        setBpelContent((String)value);
      }
      break;

    case TASKS_INFO:
      if (value == null) {
        unsetTasksInfo();
      } else {
        setTasksInfo((Map<String,TaskServiceInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BPEL_CONTENT:
      return getBpelContent();

    case TASKS_INFO:
      return getTasksInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BPEL_CONTENT:
      return isSetBpelContent();
    case TASKS_INFO:
      return isSetTasksInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceOrchRequest)
      return this.equals((ServiceOrchRequest)that);
    return false;
  }

  public boolean equals(ServiceOrchRequest that) {
    if (that == null)
      return false;

    boolean this_present_bpelContent = true && this.isSetBpelContent();
    boolean that_present_bpelContent = true && that.isSetBpelContent();
    if (this_present_bpelContent || that_present_bpelContent) {
      if (!(this_present_bpelContent && that_present_bpelContent))
        return false;
      if (!this.bpelContent.equals(that.bpelContent))
        return false;
    }

    boolean this_present_tasksInfo = true && this.isSetTasksInfo();
    boolean that_present_tasksInfo = true && that.isSetTasksInfo();
    if (this_present_tasksInfo || that_present_tasksInfo) {
      if (!(this_present_tasksInfo && that_present_tasksInfo))
        return false;
      if (!this.tasksInfo.equals(that.tasksInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceOrchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceOrchRequest typedOther = (ServiceOrchRequest)other;

    lastComparison = Boolean.valueOf(isSetBpelContent()).compareTo(typedOther.isSetBpelContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBpelContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bpelContent, typedOther.bpelContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTasksInfo()).compareTo(typedOther.isSetTasksInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasksInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasksInfo, typedOther.tasksInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceOrchRequest(");
    boolean first = true;

    if (isSetBpelContent()) {
      sb.append("bpelContent:");
      if (this.bpelContent == null) {
        sb.append("null");
      } else {
        sb.append(this.bpelContent);
      }
      first = false;
    }
    if (isSetTasksInfo()) {
      if (!first) sb.append(", ");
      sb.append("tasksInfo:");
      if (this.tasksInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tasksInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceOrchRequestStandardSchemeFactory implements SchemeFactory {
    public ServiceOrchRequestStandardScheme getScheme() {
      return new ServiceOrchRequestStandardScheme();
    }
  }

  private static class ServiceOrchRequestStandardScheme extends StandardScheme<ServiceOrchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceOrchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BPEL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bpelContent = iprot.readString();
              struct.setBpelContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASKS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.tasksInfo = new HashMap<String,TaskServiceInfo>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // required
                  TaskServiceInfo _val11; // required
                  _key10 = iprot.readString();
                  _val11 = new TaskServiceInfo();
                  _val11.read(iprot);
                  struct.tasksInfo.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setTasksInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceOrchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bpelContent != null) {
        if (struct.isSetBpelContent()) {
          oprot.writeFieldBegin(BPEL_CONTENT_FIELD_DESC);
          oprot.writeString(struct.bpelContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tasksInfo != null) {
        if (struct.isSetTasksInfo()) {
          oprot.writeFieldBegin(TASKS_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.tasksInfo.size()));
            for (Map.Entry<String, TaskServiceInfo> _iter12 : struct.tasksInfo.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceOrchRequestTupleSchemeFactory implements SchemeFactory {
    public ServiceOrchRequestTupleScheme getScheme() {
      return new ServiceOrchRequestTupleScheme();
    }
  }

  private static class ServiceOrchRequestTupleScheme extends TupleScheme<ServiceOrchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceOrchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBpelContent()) {
        optionals.set(0);
      }
      if (struct.isSetTasksInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBpelContent()) {
        oprot.writeString(struct.bpelContent);
      }
      if (struct.isSetTasksInfo()) {
        {
          oprot.writeI32(struct.tasksInfo.size());
          for (Map.Entry<String, TaskServiceInfo> _iter13 : struct.tasksInfo.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            _iter13.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceOrchRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.bpelContent = iprot.readString();
        struct.setBpelContentIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tasksInfo = new HashMap<String,TaskServiceInfo>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16; // required
            TaskServiceInfo _val17; // required
            _key16 = iprot.readString();
            _val17 = new TaskServiceInfo();
            _val17.read(iprot);
            struct.tasksInfo.put(_key16, _val17);
          }
        }
        struct.setTasksInfoIsSet(true);
      }
    }
  }

}

